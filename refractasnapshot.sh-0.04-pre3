#!/usr/bin/env bash
version="Refracta Snapshot 0.04-pre3 (20110808)"
# based primarily on refractasnapshot-8.0.4 by Dean Linkous with ideas
# borrowed from dzsnapshot-gui.sh by David Hare, which was based on an
# earlier version of this script. I'm losing track of who did what.
# fsmithred@gmail.com (August 2011)
# License: GPL-3
# This is free software with NO WARRANTY. Use at your own risk!

# DESCRIPTION
# This script makes a copy of your system with rsync and then creates
# an iso file to be used as a live-cd. There are options in the config
# file to change the location of the copy and the location of the final
# iso file, in case there's not enough room on the system drive. Read
# the config file for more options. (refractasnapshot.conf)
# In the graphical version, some settings can be configured at runtime
# in an options window.

# CHANGES in 0.04-pre1
# * Added option to create md5sum file with the iso.
# * Added /media and /mnt to the disk space report

# TODO
# report_space before set_options. (Didn't work)
# Give set_options a choice to accept settings and report space.

# If you want to change any defaults, change them in the configfile.
# Default is /etc/refractasnapshot.conf
# If you want to use a different config file for testing, change this
# variable. Normally, users should not edit anything in this script.
configfile="/etc/refractasnapshot.conf"


##### This can be removed from the final version
if ! [[ -d /usr/local/lib/refractasnapshot/iso/live ]]; then
	mkdir -p /usr/local/lib/refractasnapshot/iso/live
fi


refractasnapshot_configuration () {
if [[ -f $configfile ]]; then
    source $configfile
fi
# Check for values in $configfile and use them.
# If any are unset, these defaults will be used.
error_log=${error_log:="/var/log/refractasnapshot_errors.log"}
work_dir=${work_dir:="/tmp/work"}
snapshot_dir=${snapshot_dir:="/home/snapshot"}
save_work=${save_work:="no"}
snapshot_excludes=${snapshot_excludes:="/usr/local/lib/refractasnapshot/exclude.list"}
kernel_image=${kernel_image:="/vmlinuz"}
initrd_image=${initrd_image:="/initrd.img"}
stamp=${stamp:=""}
make_md5sum=${make_md5sum:="yes"}
}

refractasnapshot_configuration

# Record errors in a logfile.
exec 2>"$error_log"


# Check that user is root.
[[ $(id -u) -eq 0 ]] || { zenity --title="Error" --error \
--text="You need to be root\! \n\nCannot continue." ; exit 1 ; }

echo "____one"

# First window shows general information
zenity --question --title="$version" --ok-label="Next" --cancel-label="Exit" \
 --width 580 --text "Are you ready to create a live installable snapshot of your system? This utility will create a bootable image that you can burn to CD. The image will be stored in $snapshot_dir.

This is free software that comes with no warranty or guarantee of any type, including but not limited to express, implied, merchantability or fitness of purpose.
Copyright 2011 fsmithred@gmail.com, portions copyright 2009, 2010 Dean Linkous.
"
if [ $? -ne 0 ]; then
    exit 0
fi
echo "____two"


# function to show a zenity window with relevant information about disk space
check_space () {
# Check that snapshot_dir exists
if ! [[ -d $snapshot_dir ]]; then
	mkdir -p "$snapshot_dir"
	chmod 777 "$snapshot_dir"
fi

echo "111111111"
# Check and report disk space
######## NOTE: This will be misleading if $save_work = "yes"
disk_space=$(df -h | awk '/Filesystem/ { print $1 "\t " $2 "\t" $3 "\t" $4 "\t" $5 "  " $6 }' ;
df -h | awk '$6=="/" { print $1 "\t " $2 "\t" $3 "\t" $4 "\t" $5 "  " $6 }' ;
df -h | awk '$6=="/home" { print $1 "\t " $2 "\t" $3 "\t" $4 "\t" $5 "  " $6 }' ;
df -h | awk '$6~"/mnt" { print $1 "\t " $2 "\t" $3 "\t" $4 "\t" $5 "  " $6 }' ;
df -h | awk '$6~"/media" { print $1 "\t " $2 "\t" $3 "\t" $4 "\t" $5 "  " $6 }' ;
df -h | awk '$6=="/tmp" { print $1 "\t " $2 "\t" $3 "\t" $4 "\t" $5 "  " $6 }' ;)
echo "222222222"

# Issue a warning if /tmp is on a separate partition
tmp_warning=$(df -h | awk '$6=="/tmp" { printf "\nWarning: /tmp is on a separate partition. Make sure it has enough free space." }')
echo "333333333"

# Check how many snapshots already exist and their total size
snapshot_count=$(ls "$snapshot_dir"/*.iso | wc -l)
snapshot_size=$(du -sh "$snapshot_dir" | awk '{print $1}')
if [[ -z $snapshot_size ]]; then
    snapshot_size="0 bytes"
fi

echo "444444444"
# Check for saved copy of the system
if [[ -d "$work_dir"/myfs ]]; then
    saved_size=$(du -sh "$work_dir"/myfs | awk '{ print $1 }')
    saved_copy=$(echo "* You have a saved copy of the system using $saved_size of space
  located at $work_dir/myfs.")
fi
echo "555555555"

if [[ $save_work = "yes" ]]; then
	save_message=$(echo "* The temporary copy of the filesystem will be saved 
at $work_dir/myfs.")
else
	save_message=$(echo "* The temporary copy of the filesystem will be created 
at $work_dir/myfs and removed when this program finishes.")
fi

# Check that work directories exist or create them.
echo "Starting..."
if [[ $save_work = "no" ]]; then
    if [[ -d $work_dir ]]; then
        rm -rf "$work_dir"
    fi
    mkdir -p "$work_dir"/iso
    mkdir -p "$work_dir"/myfs
elif [[ $save_work = "yes" ]]; then
	if ! [[ -d $work_dir ]]; then
	    mkdir -p "$work_dir"/iso
        mkdir -p "$work_dir"/myfs
    fi
fi
}
echo "____three"

# Put it all in a zenity question window
report_space () {
zenity --question --title="Report" --ok-label="Create Snapshot" \
     --cancel-label="Exit" --width=660 \
     --text "You will need plenty of free space. It is recommended that free space (Avail) in the partition that holds the work directory (default is \"/\") should be two times the total installed system size (Used).
You can deduct the space taken up by previous snapshots and any saved copies of the system from the Used amount.

* You have $snapshot_count snapshots taking up $snapshot_size of disk space.
$saved_copy
$save_message
* The snapshot directory is currently set to $snapshot_dir
$tmp_warning

You can change these and other settings by editing 
$configfile.


Current disk usage:

$disk_space
"
if [ $? -ne 0 ]; then
    exit 0
fi
}

echo "____four"
check_space
echo "____five"

report_space
echo "____six"


cd "$work_dir"


# Let iso/, vmlinuz and initrd.img get copied, even if work_dir was saved,
# in case they have changed.
#### Add a zenity window here?

rsync -a /usr/local/lib/refractasnapshot/iso/ "$work_dir"/iso/
cp "$kernel_image" "$work_dir"/iso/live/
cp "$initrd_image" "$work_dir"/iso/live/
echo "____seven"


rsync -av / myfs/ --delete --exclude="$work_dir" \
 --exclude="$snapshot_dir" --exclude-from="$snapshot_excludes" \
 | tee >(zenity --title="Copying filesystem..." --progress --pulsate)

kill $(pgrep zenity)
echo "____eight"

mksquashfs myfs/ iso/live/filesystem.squashfs \
 | tee >(zenity --title="Squashing filesystem..." --progress --pulsate)
kill $(pgrep zenity)

# This code is redundant, because $work_dir gets removed later, but
# it might help by making more space on the hard drive for the iso.
if [[ $save_work = "no" ]]; then
    rm -rf myfs
fi


if ! [[ -d $snapshot_dir ]]; then
    mkdir "$snapshot_dir"
    chmod 777 "$snapshot_dir"
fi

# create the iso file and number it
if [[ $stamp = "datetime" ]]; then
    # use this variable so iso and md5 have same time stamp
	filename=snapshot-$(date +%Y%m%d_%H%M).iso

    genisoimage -r -J -l -D -o "$snapshot_dir"/"$filename" -cache-inodes \
    -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 \
    -boot-info-table iso/ | tee >(zenity --title="Creating CD image file..." --progress --pulsate)

	if [[ $make_md5sum = "yes" ]]; then
		md5sum "$snapshot_dir"/$filename > "$snapshot_dir"/"$filename".md5
	fi
else
    n=1
    while [[ -f "$snapshot_dir"/snapshot$n.iso ]]; do
        ((n++))
    done
    genisoimage -r -J -l -D -o "$snapshot_dir"/"$filename" -cache-inodes \
    -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 \
    -boot-info-table iso/ | tee >(zenity --title="Creating CD image file..." --progress --pulsate)

	if [[ $make_md5sum = "yes" ]]; then
		md5sum "$snapshot_dir"/snapshot$n.iso > "$snapshot_dir"/snapshot$n.iso.md5
	fi
fi
kill $(pgrep zenity)

if [[ $save_work = "no" ]]; then
    zenity --info --text="Cleaning..."
    cd /
    rm -rf "$work_dir"
else
    rm iso/live/filesystem.squashfs
fi
kill $(pgrep zenity)


zenity --info --text="All finished!"

exit 0
